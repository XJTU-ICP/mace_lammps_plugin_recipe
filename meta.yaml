{% set name = "mace_lammps_plugin" %}
{% set build = 0 %}
{% set proc_type = "cuda" if cuda_compiler_version != "None" else "cpu" %}
{% set lammps_version = "20230802.2" %}
{% set lammps = "stable_2Aug2023_update2" %}
{% set lammps_date = datetime.datetime.strptime(lammps.split('_')[1], "%d%b%Y") %}
{% set lammps_conda_version = "{:%Y.%m.%d}".format(lammps_date) %}
{% set lammps_sha256 = "3bcecabc9cad08d0a4e4d989b52d29c58505f7ead8ebacf43c9db8d9fd3d564a" %}
{% set version = "0.0.2" %}

# determine cuda version, refer to https://github.com/conda-forge/pytorch-cpu-feedstock/blob/main/recipe/meta.yaml
{% if cuda_compiler_version in (None, "None", True, False) %}
{% set cuda_major = 0 %}
{% else %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.8").split(".")[0] | int %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  - git_url: https://github.com/XJTU-ICP/mace_lammps_plugin.git
    git_depth: 1
  - url: https://github.com/lammps/lammps/archive/{{ lammps }}.tar.gz
    folder: lammps
    sha256: {{lammps_sha256}}

build:
  number: {{ build }}
  {% if mpi != 'nompi' %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% else %}
  {% set mpi_prefix = "nompi" %}
  {% endif %}
  string: cuda{{ cuda_compiler_version | replace('.', '') }}_py{{ python_version }}_h{{ PKG_HASH }}_torch{{ torch_version }}_{{ mpi_prefix }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  string: cpu_py{{ python_version }}_h{{ PKG_HASH }}_torch{{ torch_version }}_{{ mpi_prefix }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
  skip: True  # [not linux]
  skip: True  # [ppc64le]

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
    - python {{ python_version }}
    - cuda-nvcc {{ cuda_compiler_version }}  # [cuda_compiler_version != 'None']
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != 'None']
    - cuda-tools {{ cuda_compiler_version }}  # [cuda_compiler_version != 'None']
    - cuda-cudart-dev {{ cuda_compiler_version }}  # [cuda_compiler_version != 'None']
  # require by pytorch
    - libcublas-dev  # [cuda_compiler_version != 'None']
    - libcurand-dev  # [cuda_compiler_version != 'None']
    - libcufft-dev  # [cuda_compiler_version != 'None']
    - cuda-nvrtc-dev  # [cuda_compiler_version != 'None']
    - cuda-nvtx-dev  # [cuda_compiler_version != 'None']
    - cmake
    - make
    - gcc_linux-64  # [linux]
    - gxx_linux-64  # [linux]
    - pytorch {{ torch_version }}
    - pytorch * {{proc_type}}*
    - {{ mpi }}  # [build_platform != target_platform and mpi == "openmpi"]


  host:
    - cudnn  # [cuda_compiler_version != "None"]
    - {{ mpi }}
    - openmpi <5.0a0 # [mpi == "openmpi"]
    - pytorch {{ torch_version }}
    - pytorch * {{proc_type}}*
    - python  {{ python_version }}

  run:
    - __cuda  # [cuda_compiler_version != "None"]
    - {{ pin_compatible('cudnn') }}  # [cuda_compiler_version != 'None']
    - pytorch {{ torch_version }}
    - pytorch * {{ proc_type }}*
    - python  {{ python_version }}
    - {{ mpi }}
    - openmpi <5.0a0 # [mpi == "openmpi"]
  
  run_constrained:
    - lammps {{ lammps_conda_version }} cpu*{{ mpi_prefix }}*
    - libpnetcdf 1.12.3 *{{ mpi }}*
    - openmpi <5.0a0 # [mpi == "openmpi"]

test:
  files:
    - in.lammps
    - data.water
    - 20230814model.pt
  requires:
    - pip
    - lammps
    - libpnetcdf 1.12.3 *{{ mpi }}*
    - {{ mpi }}
    - openmpi <5.0a0 # [mpi == "openmpi"]
  commands:
    - export OMPI_MCA_plm=isolated OMPI_MCA_btl_vader_single_copy_mechanism=none OMPI_MCA_rmaps_base_oversubscribe=yes OMPI_MCA_plm_ssh_agent=false  # [mpi == "openmpi"]
    - export OMPI_ALLOW_RUN_AS_ROOT=1 OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1 # [mpi == "openmpi"]
    - mpiexec -n 1 lmp -in in.lammps

about:
  home: https://mace-docs.readthedocs.io/
  license: GPL-2.0
  license_family: GPL
  summary: 'LAMMPS plugin for MACE is used for dynamic simulation with MACE potential.'

  description: |
    MACE - Fast and accurate machine learning interatomic potentials with higher order equivariant message passing.
  doc_url: https://mace-docs.readthedocs.io/en/latest/guide/lammps.html
  dev_url: https://github.com/ACEsuit/mace